{"ast":null,"code":"import { effectScope, onScopeDispose, watch } from 'vue';\nexport function useToggleScope(source, fn) {\n  let scope;\n  function start() {\n    scope = effectScope();\n    scope.run(() => fn.length ? fn(() => {\n      var _scope;\n      (_scope = scope) == null ? void 0 : _scope.stop();\n      start();\n    }) : fn());\n  }\n  watch(source, active => {\n    if (active && !scope) {\n      start();\n    } else if (!active) {\n      var _scope2;\n      (_scope2 = scope) == null ? void 0 : _scope2.stop();\n      scope = undefined;\n    }\n  }, {\n    immediate: true\n  });\n  onScopeDispose(() => {\n    var _scope3;\n    (_scope3 = scope) == null ? void 0 : _scope3.stop();\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,WAAW,EAAEC,cAAc,EAAEC,KAAK,QAAQ,KAAK;AAGxD,OAAO,SAASC,cAAc,CAAEC,MAA4B,EAAEC,EAA+B,EAAE;EAC7F,IAAIC,KAA8B;EAClC,SAASC,KAAK,GAAI;IAChBD,KAAK,GAAGN,WAAW,EAAE;IACrBM,KAAK,CAACE,GAAG,CAAC,MAAMH,EAAE,CAACI,MAAM,GACrBJ,EAAE,CAAC,MAAM;MAAA;MAAE,eAAK,qBAALK,OAAOC,IAAI,EAAE;MAAEJ,KAAK,EAAE;IAAC,CAAC,CAAC,GACnCF,EAAE,EAAU,CAChB;EACH;EAEAH,KAAK,CAACE,MAAM,EAAEQ,MAAM,IAAI;IACtB,IAAIA,MAAM,IAAI,CAACN,KAAK,EAAE;MACpBC,KAAK,EAAE;IACT,CAAC,MAAM,IAAI,CAACK,MAAM,EAAE;MAAA;MAClB,gBAAK,qBAALC,QAAOF,IAAI,EAAE;MACbL,KAAK,GAAGQ,SAAS;IACnB;EACF,CAAC,EAAE;IAAEC,SAAS,EAAE;EAAK,CAAC,CAAC;EAEvBd,cAAc,CAAC,MAAM;IAAA;IACnB,gBAAK,qBAALe,QAAOL,IAAI,EAAE;EACf,CAAC,CAAC;AACJ","names":["effectScope","onScopeDispose","watch","useToggleScope","source","fn","scope","start","run","length","_scope","stop","active","_scope2","undefined","immediate","_scope3"],"sources":["../../src/composables/toggleScope.ts"],"sourcesContent":["import { effectScope, onScopeDispose, watch } from 'vue'\nimport type { EffectScope, WatchSource } from 'vue'\n\nexport function useToggleScope (source: WatchSource<boolean>, fn: (reset: () => void) => void) {\n  let scope: EffectScope | undefined\n  function start () {\n    scope = effectScope()\n    scope.run(() => fn.length\n      ? fn(() => { scope?.stop(); start() })\n      : (fn as any)()\n    )\n  }\n\n  watch(source, active => {\n    if (active && !scope) {\n      start()\n    } else if (!active) {\n      scope?.stop()\n      scope = undefined\n    }\n  }, { immediate: true })\n\n  onScopeDispose(() => {\n    scope?.stop()\n  })\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}