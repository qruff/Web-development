{"ast":null,"code":"import { Observable } from 'rxjs';\nimport { Stomp } from '@stomp/stompjs';\nimport * as SockJS from 'sockjs-client';\nimport * as i0 from \"@angular/core\";\nexport class WebsocketService {\n  constructor() {\n    const socket = new SockJS('http://localhost:8082/websocket');\n    this.stompClient = Stomp.over(socket);\n    this.stompClient.activate();\n  }\n  connectPatient() {\n    return new Observable(observer => {\n      this.stompClient.connect({}, () => {\n        this.stompClient.subscribe('/topic/patients', message => {\n          observer.next(JSON.parse(message.body));\n        });\n      });\n    });\n  }\n  connectDoctor() {\n    return new Observable(observer => {\n      this.stompClient.connect({}, () => {\n        this.stompClient.subscribe('/topic/doctors', message => {\n          observer.next(JSON.parse(message.body));\n        });\n      });\n    });\n  }\n  connectPriem() {\n    return new Observable(observer => {\n      this.stompClient.connect({}, () => {\n        this.stompClient.subscribe('/topic/priems', message => {\n          observer.next(JSON.parse(message.body));\n        });\n      });\n    });\n  }\n}\nWebsocketService.ɵfac = function WebsocketService_Factory(t) {\n  return new (t || WebsocketService)();\n};\nWebsocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WebsocketService,\n  factory: WebsocketService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAQA,UAAU,QAAO,MAAM;AAC/B,SAAQC,KAAK,QAAiB,gBAAgB;AAC9C,OAAO,KAAKC,MAAM,MAAM,eAAe;;AAIvC,OAAM,MAAOC,gBAAgB;EAE3BC;IACE,MAAMC,MAAM,GAAG,IAAIH,MAAM,CAAC,iCAAiC,CAAC;IAC5D,IAAI,CAACI,WAAW,GAAGL,KAAK,CAACM,IAAI,CAACF,MAAM,CAAC;IACrC,IAAI,CAACC,WAAW,CAACE,QAAQ,EAAE;EAC5B;EAEAC,cAAc;IACb,OAAO,IAAIT,UAAU,CAACU,QAAQ,IAAG;MAC/B,IAAI,CAACJ,WAAW,CAACK,OAAO,CAAC,EAAE,EAAE,MAAK;QAChC,IAAI,CAACL,WAAW,CAACM,SAAS,CAAC,iBAAiB,EAAGC,OAAgB,IAAI;UACjEH,QAAQ,CAACI,IAAI,CAACC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC,CAAC;QACzC,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC;EACH;EACAC,aAAa;IACZ,OAAO,IAAIlB,UAAU,CAACU,QAAQ,IAAG;MAC/B,IAAI,CAACJ,WAAW,CAACK,OAAO,CAAC,EAAE,EAAE,MAAK;QAChC,IAAI,CAACL,WAAW,CAACM,SAAS,CAAC,gBAAgB,EAAGC,OAAgB,IAAI;UAChEH,QAAQ,CAACI,IAAI,CAACC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC,CAAC;QACzC,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC;EACH;EACAE,YAAY;IACX,OAAO,IAAInB,UAAU,CAACU,QAAQ,IAAG;MAC/B,IAAI,CAACJ,WAAW,CAACK,OAAO,CAAC,EAAE,EAAE,MAAK;QAChC,IAAI,CAACL,WAAW,CAACM,SAAS,CAAC,eAAe,EAAGC,OAAgB,IAAI;UAC/DH,QAAQ,CAACI,IAAI,CAACC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC,CAAC;QACzC,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC;EACH;;AAlCUd,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAiB,SAAhBjB,gBAAgB;EAAAkB,YAFf;AAAM","names":["Observable","Stomp","SockJS","WebsocketService","constructor","socket","stompClient","over","activate","connectPatient","observer","connect","subscribe","message","next","JSON","parse","body","connectDoctor","connectPriem","factory","providedIn"],"sourceRoot":"","sources":["I:\\Универ\\2курс\\2семестр\\Web-программирование\\other\\WEB-dev-lab6\\WEB-dev-lab6\\lab6\\src\\app\\websocket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {Stomp, IMessage} from '@stomp/stompjs';\nimport * as SockJS from 'sockjs-client';\n@Injectable({\n  providedIn: 'root'\n})\nexport class WebsocketService {\n  private stompClient;\n  constructor() {\n    const socket = new SockJS('http://localhost:8082/websocket');\n    this.stompClient = Stomp.over(socket);\n    this.stompClient.activate();\n   }\n   \n   connectPatient():Observable<any>{\n    return new Observable(observer => {\n      this.stompClient.connect({}, () => {\n        this.stompClient.subscribe('/topic/patients', (message:IMessage) => {\n          observer.next(JSON.parse(message.body));\n        });\n      });\n    });\n   }\n   connectDoctor():Observable<any>{\n    return new Observable(observer => {\n      this.stompClient.connect({}, () => {\n        this.stompClient.subscribe('/topic/doctors', (message:IMessage) => {\n          observer.next(JSON.parse(message.body));\n        });\n      });\n    });\n   }\n   connectPriem():Observable<any>{\n    return new Observable(observer => {\n      this.stompClient.connect({}, () => {\n        this.stompClient.subscribe('/topic/priems', (message:IMessage) => {\n          observer.next(JSON.parse(message.body));\n        });\n      });\n    });\n   }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}