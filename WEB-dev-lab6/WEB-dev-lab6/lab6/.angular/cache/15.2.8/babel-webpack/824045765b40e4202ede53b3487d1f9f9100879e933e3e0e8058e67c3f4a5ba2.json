{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AppService {\n  constructor(http) {\n    this.http = http;\n    this.authenticated = true;\n  }\n  authenticate(credentials) {\n    const headers = new HttpHeaders(credentials ? {\n      authorization: 'Basic ' + btoa(credentials.username + ':' + credentials.password)\n    } : {});\n    this.http.get('user', {\n      headers: headers\n    }).subscribe(response => {\n      if (response) {\n        this.authenticated = true;\n      } else {\n        this.authenticated = false;\n      }\n      return;\n    });\n  }\n}\nAppService.ɵfac = function AppService_Factory(t) {\n  return new (t || AppService)(i0.ɵɵinject(i1.HttpClient));\n};\nAppService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AppService,\n  factory: AppService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAM9D,OAAM,MAAOC,UAAU;EAGrBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFlB,kBAAa,GAAG,IAAI;EAG1B;EAEAC,YAAY,CAACC,WAAoD;IAE3D,MAAMC,OAAO,GAAG,IAAIN,WAAW,CAACK,WAAW,GAAG;MAC1CE,aAAa,EAAG,QAAQ,GAAGC,IAAI,CAACH,WAAW,CAACI,QAAQ,GAAG,GAAG,GAAGJ,WAAW,CAACK,QAAQ;KACpF,GAAG,EAAE,CAAC;IAEP,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAC,MAAM,EAAE;MAACL,OAAO,EAAEA;IAAO,CAAC,CAAC,CAACM,SAAS,CAACC,QAAQ,IAAG;MAC3D,IAAIA,QAAQ,EAAE;QACV,IAAI,CAACC,aAAa,GAAG,IAAI;OAC5B,MAAM;QACH,IAAI,CAACA,aAAa,GAAG,KAAK;;MAE9B;IACJ,CAAC,CAAC;EAEN;;AArBSb,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAAc,SAAVd,UAAU;EAAAe,YAFT;AAAM","names":["HttpHeaders","AppService","constructor","http","authenticate","credentials","headers","authorization","btoa","username","password","get","subscribe","response","authenticated","factory","providedIn"],"sourceRoot":"","sources":["C:\\WEB-dev\\lab6\\src\\app\\app.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppService {\n public authenticated = true;\n\n  constructor(private http: HttpClient) {\n  }\n\n  authenticate(credentials: { username: string; password: string; }) {\n\n        const headers = new HttpHeaders(credentials ? {\n            authorization : 'Basic ' + btoa(credentials.username + ':' + credentials.password)\n        } : {});\n\n        this.http.get('user', {headers: headers}).subscribe(response => {\n            if (response) {\n                this.authenticated = true;\n            } else {\n                this.authenticated = false;\n            }\n            return ;\n        });\n\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}